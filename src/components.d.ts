/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface AlertComp {
    'rciclass': string;
  }
  interface AlertComponent {
    'alertClickableSample': string;
    'alertSample': string;
    'dangerAltClass': string;
    'darkAltClass': string;
    'errorMessageSample': string;
    'infoAltClass': string;
    'lightAltClass': string;
    'primaryAltClass': string;
    'secondaryAltClass': string;
    'successAltClass': string;
    'warningAltClass': string;
  }
  interface ButtonComponent {
    'rciClass': string;
    'rciDisabled': boolean;
    'rciName': string;
  }
  interface ButtonGroupComponent {}
  interface CalendarComponent {
    'calendarActiveClass': string;
    'calendarClass': string;
    'calendarDisableClass': string;
  }
  interface CardComponent {
    'cardTitle': string;
    'imageUrl': string;
    'redirectUrl': string;
  }
  interface CardDeck {}
  interface CarouselBody {
    'activeClass': string;
    'carouselDescription': string;
    'carouselHeading': string;
    'carouselImageAlt': string;
    'carouselImageUrl': string;
    'rciDisabled': boolean;
  }
  interface CarouselComponent {}
  interface DropdownComponent {
    'dropdownButtonName': string;
    'dropdownClass': string;
    'dropdownId': string;
    'dropdownMenuPlacement': string;
  }
  interface DropdownComponentForm {
    'dropdownContent': string;
    'dropdownId': string;
  }
  interface DropdownMenu {
    'hrefOption': string;
    'menuOption': string;
  }
  interface FormComponent {
    'rciClass': string;
    'rciDisabled': boolean;
    'rciName': string;
  }
  interface ListComponent {
    'listName': string;
  }
  interface LoaderSpinnerComponent {
    'rciClass': string;
    'rciType': string;
  }
  interface NewformComponent {
    'inputContent': string;
    'inputId': string;
    'inputType': string;
    'isDisabled': boolean;
    'placeHolder': string;
  }
  interface NewinputComponent {
    'inputContent': string;
    'inputId': string;
    'inputType': string;
    'isDisabled': boolean;
    'isInvalidClass': string;
    'placeHolder': string;
  }
  interface PaginationComponent {
    'firstPage': string;
    'lastPage': string;
    'morePage': string;
    'nextPage': string;
    'previousPage': string;
  }
  interface RadioCheckboxComponent {
    'customControl': boolean;
    'inputContent': string;
    'inputId': string;
    'inputName': string;
    'inputType': string;
    'inputValue': string;
    'isDisabled': boolean;
    'isHorizontal': boolean;
  }
  interface RciAnchor {
    'rciClass': string;
    'rciHref': string;
    'rciName': string;
  }
  interface RciTab {}
  interface RciTabContent {}
  interface RciTable {
    'rciClass': string;
    'rciTableData': object[];
  }
  interface SubmitButtonComponent {
    'btnClass': string;
    'btnContent': string;
    'btnType': string;
  }
  interface TabComponent {
    'activeClass': string;
    'disableClass': string;
    'firstTab': string;
    'firstTabContent': string;
    'secondTab': string;
    'secondTabContent': string;
    'thirdTab': string;
    'thirdTabContent': string;
  }
  interface TabList {}
  interface TableComponent {
    'firstData': string;
    'firstHeadName': string;
    'fourthData': string;
    'fourthHeadName': string;
    'secondData': string;
    'secondHeadName': string;
    'thirdData': string;
    'thirdHeadName': string;
  }
  interface TextareaComponent {
    'textareaContent': string;
    'textareaId': string;
  }
}

declare global {


  interface HTMLAlertCompElement extends Components.AlertComp, HTMLStencilElement {}
  var HTMLAlertCompElement: {
    prototype: HTMLAlertCompElement;
    new (): HTMLAlertCompElement;
  };

  interface HTMLAlertComponentElement extends Components.AlertComponent, HTMLStencilElement {}
  var HTMLAlertComponentElement: {
    prototype: HTMLAlertComponentElement;
    new (): HTMLAlertComponentElement;
  };

  interface HTMLButtonComponentElement extends Components.ButtonComponent, HTMLStencilElement {}
  var HTMLButtonComponentElement: {
    prototype: HTMLButtonComponentElement;
    new (): HTMLButtonComponentElement;
  };

  interface HTMLButtonGroupComponentElement extends Components.ButtonGroupComponent, HTMLStencilElement {}
  var HTMLButtonGroupComponentElement: {
    prototype: HTMLButtonGroupComponentElement;
    new (): HTMLButtonGroupComponentElement;
  };

  interface HTMLCalendarComponentElement extends Components.CalendarComponent, HTMLStencilElement {}
  var HTMLCalendarComponentElement: {
    prototype: HTMLCalendarComponentElement;
    new (): HTMLCalendarComponentElement;
  };

  interface HTMLCardComponentElement extends Components.CardComponent, HTMLStencilElement {}
  var HTMLCardComponentElement: {
    prototype: HTMLCardComponentElement;
    new (): HTMLCardComponentElement;
  };

  interface HTMLCardDeckElement extends Components.CardDeck, HTMLStencilElement {}
  var HTMLCardDeckElement: {
    prototype: HTMLCardDeckElement;
    new (): HTMLCardDeckElement;
  };

  interface HTMLCarouselBodyElement extends Components.CarouselBody, HTMLStencilElement {}
  var HTMLCarouselBodyElement: {
    prototype: HTMLCarouselBodyElement;
    new (): HTMLCarouselBodyElement;
  };

  interface HTMLCarouselComponentElement extends Components.CarouselComponent, HTMLStencilElement {}
  var HTMLCarouselComponentElement: {
    prototype: HTMLCarouselComponentElement;
    new (): HTMLCarouselComponentElement;
  };

  interface HTMLDropdownComponentElement extends Components.DropdownComponent, HTMLStencilElement {}
  var HTMLDropdownComponentElement: {
    prototype: HTMLDropdownComponentElement;
    new (): HTMLDropdownComponentElement;
  };

  interface HTMLDropdownComponentFormElement extends Components.DropdownComponentForm, HTMLStencilElement {}
  var HTMLDropdownComponentFormElement: {
    prototype: HTMLDropdownComponentFormElement;
    new (): HTMLDropdownComponentFormElement;
  };

  interface HTMLDropdownMenuElement extends Components.DropdownMenu, HTMLStencilElement {}
  var HTMLDropdownMenuElement: {
    prototype: HTMLDropdownMenuElement;
    new (): HTMLDropdownMenuElement;
  };

  interface HTMLFormComponentElement extends Components.FormComponent, HTMLStencilElement {}
  var HTMLFormComponentElement: {
    prototype: HTMLFormComponentElement;
    new (): HTMLFormComponentElement;
  };

  interface HTMLListComponentElement extends Components.ListComponent, HTMLStencilElement {}
  var HTMLListComponentElement: {
    prototype: HTMLListComponentElement;
    new (): HTMLListComponentElement;
  };

  interface HTMLLoaderSpinnerComponentElement extends Components.LoaderSpinnerComponent, HTMLStencilElement {}
  var HTMLLoaderSpinnerComponentElement: {
    prototype: HTMLLoaderSpinnerComponentElement;
    new (): HTMLLoaderSpinnerComponentElement;
  };

  interface HTMLNewformComponentElement extends Components.NewformComponent, HTMLStencilElement {}
  var HTMLNewformComponentElement: {
    prototype: HTMLNewformComponentElement;
    new (): HTMLNewformComponentElement;
  };

  interface HTMLNewinputComponentElement extends Components.NewinputComponent, HTMLStencilElement {}
  var HTMLNewinputComponentElement: {
    prototype: HTMLNewinputComponentElement;
    new (): HTMLNewinputComponentElement;
  };

  interface HTMLPaginationComponentElement extends Components.PaginationComponent, HTMLStencilElement {}
  var HTMLPaginationComponentElement: {
    prototype: HTMLPaginationComponentElement;
    new (): HTMLPaginationComponentElement;
  };

  interface HTMLRadioCheckboxComponentElement extends Components.RadioCheckboxComponent, HTMLStencilElement {}
  var HTMLRadioCheckboxComponentElement: {
    prototype: HTMLRadioCheckboxComponentElement;
    new (): HTMLRadioCheckboxComponentElement;
  };

  interface HTMLRciAnchorElement extends Components.RciAnchor, HTMLStencilElement {}
  var HTMLRciAnchorElement: {
    prototype: HTMLRciAnchorElement;
    new (): HTMLRciAnchorElement;
  };

  interface HTMLRciTabElement extends Components.RciTab, HTMLStencilElement {}
  var HTMLRciTabElement: {
    prototype: HTMLRciTabElement;
    new (): HTMLRciTabElement;
  };

  interface HTMLRciTabContentElement extends Components.RciTabContent, HTMLStencilElement {}
  var HTMLRciTabContentElement: {
    prototype: HTMLRciTabContentElement;
    new (): HTMLRciTabContentElement;
  };

  interface HTMLRciTableElement extends Components.RciTable, HTMLStencilElement {}
  var HTMLRciTableElement: {
    prototype: HTMLRciTableElement;
    new (): HTMLRciTableElement;
  };

  interface HTMLSubmitButtonComponentElement extends Components.SubmitButtonComponent, HTMLStencilElement {}
  var HTMLSubmitButtonComponentElement: {
    prototype: HTMLSubmitButtonComponentElement;
    new (): HTMLSubmitButtonComponentElement;
  };

  interface HTMLTabComponentElement extends Components.TabComponent, HTMLStencilElement {}
  var HTMLTabComponentElement: {
    prototype: HTMLTabComponentElement;
    new (): HTMLTabComponentElement;
  };

  interface HTMLTabListElement extends Components.TabList, HTMLStencilElement {}
  var HTMLTabListElement: {
    prototype: HTMLTabListElement;
    new (): HTMLTabListElement;
  };

  interface HTMLTableComponentElement extends Components.TableComponent, HTMLStencilElement {}
  var HTMLTableComponentElement: {
    prototype: HTMLTableComponentElement;
    new (): HTMLTableComponentElement;
  };

  interface HTMLTextareaComponentElement extends Components.TextareaComponent, HTMLStencilElement {}
  var HTMLTextareaComponentElement: {
    prototype: HTMLTextareaComponentElement;
    new (): HTMLTextareaComponentElement;
  };
  interface HTMLElementTagNameMap {
    'alert-comp': HTMLAlertCompElement;
    'alert-component': HTMLAlertComponentElement;
    'button-component': HTMLButtonComponentElement;
    'button-group-component': HTMLButtonGroupComponentElement;
    'calendar-component': HTMLCalendarComponentElement;
    'card-component': HTMLCardComponentElement;
    'card-deck': HTMLCardDeckElement;
    'carousel-body': HTMLCarouselBodyElement;
    'carousel-component': HTMLCarouselComponentElement;
    'dropdown-component': HTMLDropdownComponentElement;
    'dropdown-component-form': HTMLDropdownComponentFormElement;
    'dropdown-menu': HTMLDropdownMenuElement;
    'form-component': HTMLFormComponentElement;
    'list-component': HTMLListComponentElement;
    'loader-spinner-component': HTMLLoaderSpinnerComponentElement;
    'newform-component': HTMLNewformComponentElement;
    'newinput-component': HTMLNewinputComponentElement;
    'pagination-component': HTMLPaginationComponentElement;
    'radio-checkbox-component': HTMLRadioCheckboxComponentElement;
    'rci-anchor': HTMLRciAnchorElement;
    'rci-tab': HTMLRciTabElement;
    'rci-tab-content': HTMLRciTabContentElement;
    'rci-table': HTMLRciTableElement;
    'submit-button-component': HTMLSubmitButtonComponentElement;
    'tab-component': HTMLTabComponentElement;
    'tab-list': HTMLTabListElement;
    'table-component': HTMLTableComponentElement;
    'textarea-component': HTMLTextareaComponentElement;
  }
}

declare namespace LocalJSX {
  interface AlertComp {
    'rciclass'?: string;
  }
  interface AlertComponent {
    'alertClickableSample'?: string;
    'alertSample'?: string;
    'dangerAltClass'?: string;
    'darkAltClass'?: string;
    'errorMessageSample'?: string;
    'infoAltClass'?: string;
    'lightAltClass'?: string;
    'primaryAltClass'?: string;
    'secondaryAltClass'?: string;
    'successAltClass'?: string;
    'warningAltClass'?: string;
  }
  interface ButtonComponent {
    'rciClass'?: string;
    'rciDisabled'?: boolean;
    'rciName'?: string;
  }
  interface ButtonGroupComponent {}
  interface CalendarComponent {
    'calendarActiveClass'?: string;
    'calendarClass'?: string;
    'calendarDisableClass'?: string;
  }
  interface CardComponent {
    'cardTitle'?: string;
    'imageUrl'?: string;
    'redirectUrl'?: string;
  }
  interface CardDeck {}
  interface CarouselBody {
    'activeClass'?: string;
    'carouselDescription'?: string;
    'carouselHeading'?: string;
    'carouselImageAlt'?: string;
    'carouselImageUrl'?: string;
    'rciDisabled'?: boolean;
  }
  interface CarouselComponent {}
  interface DropdownComponent {
    'dropdownButtonName'?: string;
    'dropdownClass'?: string;
    'dropdownId'?: string;
    'dropdownMenuPlacement'?: string;
  }
  interface DropdownComponentForm {
    'dropdownContent'?: string;
    'dropdownId'?: string;
  }
  interface DropdownMenu {
    'hrefOption'?: string;
    'menuOption'?: string;
  }
  interface FormComponent {
    'rciClass'?: string;
    'rciDisabled'?: boolean;
    'rciName'?: string;
  }
  interface ListComponent {
    'listName'?: string;
  }
  interface LoaderSpinnerComponent {
    'rciClass'?: string;
    'rciType'?: string;
  }
  interface NewformComponent {
    'inputContent'?: string;
    'inputId'?: string;
    'inputType'?: string;
    'isDisabled'?: boolean;
    'placeHolder'?: string;
  }
  interface NewinputComponent {
    'inputContent'?: string;
    'inputId'?: string;
    'inputType'?: string;
    'isDisabled'?: boolean;
    'isInvalidClass'?: string;
    'placeHolder'?: string;
  }
  interface PaginationComponent {
    'firstPage'?: string;
    'lastPage'?: string;
    'morePage'?: string;
    'nextPage'?: string;
    'previousPage'?: string;
  }
  interface RadioCheckboxComponent {
    'customControl'?: boolean;
    'inputContent'?: string;
    'inputId'?: string;
    'inputName'?: string;
    'inputType'?: string;
    'inputValue'?: string;
    'isDisabled'?: boolean;
    'isHorizontal'?: boolean;
  }
  interface RciAnchor {
    'rciClass'?: string;
    'rciHref'?: string;
    'rciName'?: string;
  }
  interface RciTab {}
  interface RciTabContent {}
  interface RciTable {
    'rciClass'?: string;
    'rciTableData'?: object[];
  }
  interface SubmitButtonComponent {
    'btnClass'?: string;
    'btnContent'?: string;
    'btnType'?: string;
  }
  interface TabComponent {
    'activeClass'?: string;
    'disableClass'?: string;
    'firstTab'?: string;
    'firstTabContent'?: string;
    'secondTab'?: string;
    'secondTabContent'?: string;
    'thirdTab'?: string;
    'thirdTabContent'?: string;
  }
  interface TabList {}
  interface TableComponent {
    'firstData'?: string;
    'firstHeadName'?: string;
    'fourthData'?: string;
    'fourthHeadName'?: string;
    'secondData'?: string;
    'secondHeadName'?: string;
    'thirdData'?: string;
    'thirdHeadName'?: string;
  }
  interface TextareaComponent {
    'textareaContent'?: string;
    'textareaId'?: string;
  }

  interface IntrinsicElements {
    'alert-comp': AlertComp;
    'alert-component': AlertComponent;
    'button-component': ButtonComponent;
    'button-group-component': ButtonGroupComponent;
    'calendar-component': CalendarComponent;
    'card-component': CardComponent;
    'card-deck': CardDeck;
    'carousel-body': CarouselBody;
    'carousel-component': CarouselComponent;
    'dropdown-component': DropdownComponent;
    'dropdown-component-form': DropdownComponentForm;
    'dropdown-menu': DropdownMenu;
    'form-component': FormComponent;
    'list-component': ListComponent;
    'loader-spinner-component': LoaderSpinnerComponent;
    'newform-component': NewformComponent;
    'newinput-component': NewinputComponent;
    'pagination-component': PaginationComponent;
    'radio-checkbox-component': RadioCheckboxComponent;
    'rci-anchor': RciAnchor;
    'rci-tab': RciTab;
    'rci-tab-content': RciTabContent;
    'rci-table': RciTable;
    'submit-button-component': SubmitButtonComponent;
    'tab-component': TabComponent;
    'tab-list': TabList;
    'table-component': TableComponent;
    'textarea-component': TextareaComponent;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'alert-comp': LocalJSX.AlertComp & JSXBase.HTMLAttributes<HTMLAlertCompElement>;
      'alert-component': LocalJSX.AlertComponent & JSXBase.HTMLAttributes<HTMLAlertComponentElement>;
      'button-component': LocalJSX.ButtonComponent & JSXBase.HTMLAttributes<HTMLButtonComponentElement>;
      'button-group-component': LocalJSX.ButtonGroupComponent & JSXBase.HTMLAttributes<HTMLButtonGroupComponentElement>;
      'calendar-component': LocalJSX.CalendarComponent & JSXBase.HTMLAttributes<HTMLCalendarComponentElement>;
      'card-component': LocalJSX.CardComponent & JSXBase.HTMLAttributes<HTMLCardComponentElement>;
      'card-deck': LocalJSX.CardDeck & JSXBase.HTMLAttributes<HTMLCardDeckElement>;
      'carousel-body': LocalJSX.CarouselBody & JSXBase.HTMLAttributes<HTMLCarouselBodyElement>;
      'carousel-component': LocalJSX.CarouselComponent & JSXBase.HTMLAttributes<HTMLCarouselComponentElement>;
      'dropdown-component': LocalJSX.DropdownComponent & JSXBase.HTMLAttributes<HTMLDropdownComponentElement>;
      'dropdown-component-form': LocalJSX.DropdownComponentForm & JSXBase.HTMLAttributes<HTMLDropdownComponentFormElement>;
      'dropdown-menu': LocalJSX.DropdownMenu & JSXBase.HTMLAttributes<HTMLDropdownMenuElement>;
      'form-component': LocalJSX.FormComponent & JSXBase.HTMLAttributes<HTMLFormComponentElement>;
      'list-component': LocalJSX.ListComponent & JSXBase.HTMLAttributes<HTMLListComponentElement>;
      'loader-spinner-component': LocalJSX.LoaderSpinnerComponent & JSXBase.HTMLAttributes<HTMLLoaderSpinnerComponentElement>;
      'newform-component': LocalJSX.NewformComponent & JSXBase.HTMLAttributes<HTMLNewformComponentElement>;
      'newinput-component': LocalJSX.NewinputComponent & JSXBase.HTMLAttributes<HTMLNewinputComponentElement>;
      'pagination-component': LocalJSX.PaginationComponent & JSXBase.HTMLAttributes<HTMLPaginationComponentElement>;
      'radio-checkbox-component': LocalJSX.RadioCheckboxComponent & JSXBase.HTMLAttributes<HTMLRadioCheckboxComponentElement>;
      'rci-anchor': LocalJSX.RciAnchor & JSXBase.HTMLAttributes<HTMLRciAnchorElement>;
      'rci-tab': LocalJSX.RciTab & JSXBase.HTMLAttributes<HTMLRciTabElement>;
      'rci-tab-content': LocalJSX.RciTabContent & JSXBase.HTMLAttributes<HTMLRciTabContentElement>;
      'rci-table': LocalJSX.RciTable & JSXBase.HTMLAttributes<HTMLRciTableElement>;
      'submit-button-component': LocalJSX.SubmitButtonComponent & JSXBase.HTMLAttributes<HTMLSubmitButtonComponentElement>;
      'tab-component': LocalJSX.TabComponent & JSXBase.HTMLAttributes<HTMLTabComponentElement>;
      'tab-list': LocalJSX.TabList & JSXBase.HTMLAttributes<HTMLTabListElement>;
      'table-component': LocalJSX.TableComponent & JSXBase.HTMLAttributes<HTMLTableComponentElement>;
      'textarea-component': LocalJSX.TextareaComponent & JSXBase.HTMLAttributes<HTMLTextareaComponentElement>;
    }
  }
}


